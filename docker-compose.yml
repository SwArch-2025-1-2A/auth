#--------------------------------------------------------------------------------------------------------------------------#
#|                                                COMMON CONFIGURATIONS                                                   |#
#--------------------------------------------------------------------------------------------------------------------------#
# &mu-auth-ms-common-config is what's called an anchor in .yaml files. It lets us reuse everything that follows, so that 
# setting up the dev and prod profiles is easier
x-mu-auth-ms-common-config: &mu-auth-ms-common-config
  build: .
  
  # Hostname for which the service will be reachable
  hostname: ${mu_auth_ms_HOSTNAME:-mu_auth_ms}
  container_name: ${mu_auth_ms_HOSTNAME:-mu_auth_ms}
  
  # Ports exposed to OTHER SERVICES but NOT the HOST machine
  expose:
    - ${mu_auth_ms_INTERNAL_PORT:-5000}

  environment:
    # `DATABASE_URL` is constructed from the `mu_auth_db` variables, like this:
    #   postgresql://{user}:{password}@{hostname}:{port}/{db}?sslmode=disable
    DATABASE_URL: postgresql://${mu_auth_db_USER:-postgres}:${mu_auth_db_PASSWORD:-meetUN}@${mu_auth_db_HOSTNAME:-mu_auth_db}:${mu_auth_db_INTERNAL_PORT:-5432}/${mu_auth_db_DB:-auth}?sslmode=disable
    REDIS_CONNECTION_STRING: redis://${mu_whitelist_db_HOSTNAME:-mu_whitelist_db}:${mu_whitelist_db_INTERNAL_PORT:-6379}
    JWT_SECRET: ${mu_auth_ms_JWT_SECRET:-defaultsecret}
    USER_TOKEN_EXPIRATION_TIME: ${mu_auth_ms_USER_TOKEN_EXPIRATION_TIME:-300}
    INTERNAL_PORT: ${mu_auth_ms_INTERNAL_PORT:-5000}
    EXPOSED_PORT: ${mu_auth_ms_EXTERNAL_PORT:-5000}

  restart: on-failure:2 # NOTE: Service won't restart after failing twice


x-mu-auth-db-common-config: &mu-auth-db-common-config
  image: postgres:17-alpine

  # Hostname for which the service will be reachable
  hostname: ${mu_auth_db_HOSTNAME:-mu_auth_db}
  container_name: ${mu_auth_db_HOSTNAME:-mu_auth_db}

  # Ports exposed to OTHER SERVICES but NOT the HOST machine
  expose:
    - ${mu_auth_db_INTERNAL_PORT:-5432}

  restart: always

  environment:
    POSTGRES_USER: ${mu_auth_db_USER:-postgres}
    POSTGRES_PASSWORD: ${mu_auth_db_PASSWORD:-meetUN}
    POSTGRES_DB: ${mu_auth_db_DB:-meetun}
    PGPORT: ${mu_auth_db_INTERNAL_PORT:-5432}

  volumes:
    - mu-auth-db-data:/var/lib/postgresql/data


x-mu-whitelist-db-common-config: &mu-whitelist-db-common-config
  image: redis:7-alpine

  # Hostname for which the service will be reachable
  hostname: ${mu_whitelist_db_HOSTNAME:-mu_whitelist_db}
  container_name: ${mu_whitelist_db_HOSTNAME:-mu_whitelist_db}

  # Ports exposed to OTHER SERVICES but NOT the HOST machine
  expose:
    - ${mu_whitelist_db_INTERNAL_PORT:-6379}

  restart: always

  volumes:
    - mu-whitelist-db-data:/data



services:
#--------------------------------------------------------------------------------------------------------------------------#
#|                                                PROFILES FOR PRODUCTION                                                 |#
#--------------------------------------------------------------------------------------------------------------------------#
# These profiles don't expose any ports to the host. The networks they are connected to are defined at the root of the
# project in a Docker Compose override file
  mu_auth_ms_prod:
    <<: *mu-auth-ms-common-config
    depends_on:
      - mu_auth_db_prod
      - mu_whitelist_db_prod
    profiles:
      - prod

  mu_auth_db_prod:
    <<: *mu-auth-db-common-config
    profiles:
      - prod

  mu_whitelist_db_prod:
    <<: *mu-whitelist-db-common-config
    profiles:
      - prod


#--------------------------------------------------------------------------------------------------------------------------#
#|                                                PROFILES FOR DEVELOPMENT                                                |#
#--------------------------------------------------------------------------------------------------------------------------#
# Auth microservice for development (connected to the default network and exposing its ports to the host)
  mu_auth_ms_dev:
    <<: *mu-auth-ms-common-config
    profiles:
      - dev
    networks:
      - default
    # Ports available on the HOST machine
    ports:
      - ${mu_auth_ms_EXTERNAL_PORT:-5000}:${mu_auth_ms_INTERNAL_PORT:-5000}    
    depends_on:
      - mu_auth_db_dev
      - mu_whitelist_db_dev

  mu_auth_db_dev:
    <<: *mu-auth-db-common-config
    profiles:
      - dev
    networks:
      - default

  mu_whitelist_db_dev:
    <<: *mu-whitelist-db-common-config
    profiles:
      - dev
    networks:
      - default



volumes:
  mu-auth-db-data:
  mu-whitelist-db-data:
